{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx\";\nimport * as React from 'react';\nimport \"./Table.css\";\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: this.props.url,\n      headers: [],\n      rows: []\n    };\n  }\n\n  renderTableData() {\n    return this.state.rows.map((player, index) => {\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, player.map((data, index) => {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, data);\n      }));\n    });\n  }\n\n  renderTableHeader() {\n    let header = Object.keys(this.state.headers);\n    return header.map((key, index) => {\n      return React.createElement(\"th\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, key.toUpperCase());\n    });\n  }\n\n  async createTable() {\n    await fetch('http://localhost:2999/get_roster_data', {\n      method: 'POST',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"value\": this.state.url\n      })\n    }).then(async response => {\n      if (response.ok) {\n        await response.json().then(json => {\n          console.log(\"FROM THEN: \" + JSON.stringify(json));\n          this.setState({\n            headers: json.data[0],\n            rows: json.data.splice(1)\n          });\n        });\n      }\n    }).catch(e => console.log(\"ERROR: \" + e));\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"Headers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.renderTableHeader()), this.renderTableData());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"Table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.createTable()));\n  }\n\n}\n\nexport default Table; // export interface column {\n// \ttitle: string;\n//     dataIndex: string;\n//     key: string;\n//     width: number;\n// }\n// export interface row {\n// \t[key:string]: string\n// }\n// function createColumns(colNames:string[]) {\n// \tlet cols:column[] = []\n// \tfor (let i = 0; i < colNames.length; i++) {\n// \t\tlet newCol:column = {\n// \t\t\ttitle: colNames[i],\n// \t\t\tdataIndex: colNames[i],\n// \t\t\tkey: colNames[i],\n// \t\t\twidth: 100\n// \t\t}\n// \t\tcols.push(newCol)\n// \t}\n// \treturn cols;\n// }\n// function createRows(data:string[][]) {\n// \tlet colIds:string[] = data[0]\n// \tlet rows:row[] = []\n// \tfor (let i = 1; i < data.length; i++) {\n// \t\tlet newRow:row = {}\n// \t\tfor (let j = 0; j < colIds.length; j++) {\n// \t\t\tnewRow[colIds[j]] = data[i][j]\n// \t\t}\n// \t\trows.push(newRow)\n// \t}\n// \treturn rows;\n// }\n// // function createTable(data:string[][]) {\n// // \tlet cols:column[] = createColumns(data[0])\n// // \tlet rows:row[] = createRows(data)\n// // \treturn (\n// // \t\t<div className=\"Tables\">\n// // \t\t\t<Table columns={cols} data={rows} />\n// // \t\t</div>\n// // \t);\n// // }\n// module.exports = {\n// \tcreateColumns,\t\t\t\tcreateRows,\n// \tcreateTable\n// }","map":{"version":3,"sources":["/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx"],"names":["React","Table","Component","constructor","props","state","url","headers","rows","renderTableData","map","player","index","data","renderTableHeader","header","Object","keys","key","toUpperCase","createTable","fetch","method","body","JSON","stringify","then","response","ok","json","console","log","setState","splice","catch","e","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport \"./Table.css\"\n\ninterface tableProps {\n\turl:string;\n}\n\ninterface tableState {\n\turl: string;\n\theaders:string[];\n\trows:string[][];\n}\n\nclass Table extends React.Component<tableProps,tableState> {\n\n   \tconstructor(props:tableProps) {\n      \tsuper(props) \n      \tthis.state = { \n      \t\turl: this.props.url,\n      \t\theaders: [],\n      \t\trows: []\n      }\n   }\n\n   renderTableData() {\n      \treturn this.state.rows.map((player, index) => {\n         \treturn (\n\t         \t<td>{\n\t\t         \tplayer.map((data, index) => {\n\t\t               return (<tr>{data}</tr>);\n\t\t           \t})\n\t\t         }</td>\n      \t\t);\n         })\n   }\n\n   renderTableHeader() {\n      let header = Object.keys(this.state.headers)\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n\n\n   async createTable() {\n   \t\tawait fetch('http://localhost:2999/get_roster_data', {\n  \t\t\tmethod: 'POST',\n  \t\t\theaders: {\n  \t\t\t\t'Access-Control-Allow-Origin': '*',\n  \t\t\t\t'Accept': 'application/json',\n    \t\t\t'Content-Type': 'application/json'\n  \t\t\t},\n  \t\t\tbody: JSON.stringify({\"value\": this.state.url})\n  \t\t})\n  \t\t\t.then(async (response) => {\n  \t\t\t\tif (response.ok) {\n  \t\t\t\t\tawait response.json().then(json => {\n  \t\t\t\t\t\tconsole.log(\"FROM THEN: \" + JSON.stringify(json))\n  \t\t\t\t\t\tthis.setState({\n  \t\t\t\t\t\t\theaders: json.data[0],\n  \t\t\t\t\t\t\trows: json.data.splice(1)\n  \t\t\t\t\t\t})\n  \t\t\t\t\t})\n  \t\t\t\t}\n  \t\t\t})\n\t\t\t.catch((e) => console.log(\"ERROR: \" + e))\n\n   \t\treturn (\n   \t\t\t<tbody>\n\t   \t\t\t<tr className=\"Headers\">{this.renderTableHeader()}</tr>\n\t                  {this.renderTableData()}\n\t      \t</tbody>       \n        );\n   }\n\n   render() {\n      \treturn (\n        \t<div>\n            \t<table className='Table'>\n               \t\t\t{this.createTable()}\n            \t</table>\n         \t</div>\n      \t)\n   }\n}\n\nexport default Table;\n\n// export interface column {\n// \ttitle: string;\n//     dataIndex: string;\n//     key: string;\n//     width: number;\n// }\n\n// export interface row {\n// \t[key:string]: string\n// }\n\n// function createColumns(colNames:string[]) {\n// \tlet cols:column[] = []\n// \tfor (let i = 0; i < colNames.length; i++) {\n// \t\tlet newCol:column = {\n// \t\t\ttitle: colNames[i],\n// \t\t\tdataIndex: colNames[i],\n// \t\t\tkey: colNames[i],\n// \t\t\twidth: 100\n// \t\t}\n// \t\tcols.push(newCol)\n// \t}\n// \treturn cols;\n// }\n\n// function createRows(data:string[][]) {\n// \tlet colIds:string[] = data[0]\n// \tlet rows:row[] = []\n// \tfor (let i = 1; i < data.length; i++) {\n// \t\tlet newRow:row = {}\n// \t\tfor (let j = 0; j < colIds.length; j++) {\n// \t\t\tnewRow[colIds[j]] = data[i][j]\n// \t\t}\n// \t\trows.push(newRow)\n// \t}\n// \treturn rows;\n// }\n\n\n// // function createTable(data:string[][]) {\n// // \tlet cols:column[] = createColumns(data[0])\n// // \tlet rows:row[] = createRows(data)\n// // \treturn (\n// // \t\t<div className=\"Tables\">\n// // \t\t\t<Table columns={cols} data={rows} />\n// // \t\t</div>\n// // \t);\n// // }\n\n// module.exports = {\n// \tcreateColumns,\t\t\t\tcreateRows,\n// \tcreateTable\n// }"]},"metadata":{},"sourceType":"module"}