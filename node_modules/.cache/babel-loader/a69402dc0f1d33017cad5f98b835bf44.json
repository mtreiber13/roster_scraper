{"ast":null,"code":"import _slicedToArray from \"/Users/admin/Desktop/Work/roster_scraper/scraper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx\";\nimport React, { useState } from 'react';\nimport \"./Table.css\";\nimport useAxios from 'axios-hooks';\n\nfunction Table(props) {\n  const _useState = useState({\n    url: props.url,\n    headers: [],\n    rows: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useAxios = useAxios({\n    url: 'http://localhost:2999/get_roster_data',\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"value\": state.url\n    }\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 2),\n        _useAxios2$ = _useAxios2[0],\n        data = _useAxios2$.data,\n        loading = _useAxios2$.loading,\n        error = _useAxios2$.error,\n        execute = _useAxios2[1];\n\n  function renderTableData() {\n    return state.rows.map((player, index) => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, player.map((data, index) => {\n        return React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, data);\n      }));\n    });\n  }\n\n  function renderTableHeader() {\n    let header = state.headers;\n    return header.map((key, index) => {\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, key.toUpperCase());\n    });\n  }\n\n  function createTable() {\n    execute();\n    setState({\n      url: state.url,\n      headers: data.data[0],\n      rows: data.data.splice(1)\n    });\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"Headers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, renderTableHeader()), renderTableData());\n  } // function getTableData() {\n  // \t\tawait fetch('http://localhost:2999/get_roster_data', {\n  // \t\tmethod: 'POST',\n  // \t\theaders: {\n  // \t\t\t'Access-Control-Allow-Origin': '*',\n  // \t\t\t'Accept': 'application/json',\n  //  \t\t\t'Content-Type': 'application/json'\n  // \t\t},\n  // \t\tbody: JSON.stringify({\"value\": state.url})\n  // \t})\n  // \t\t.then(async (response) => {\n  // \t\t\tif (response.ok) {\n  // \t\t\t\tawait response.json().then(json => {\n  // \t\t\t\t\tconsole.log(\"FROM TABLE = \" + JSON.stringify(json.data))\n  // \t\t\t\t\tif (json.data === []) {\n  // \t\t\t\t\t\tsetState({\n  // \t\t\t\t\t\t\turl: state.url,\n  // \t\t\t\t\t\t\theaders: [],\n  // \t\t\t\t\t\t\trows: [],\n  // \t\t\t\t\t\t})\n  // \t\t\t\t\t} else {\n  // \t\t\t\t\t\tsetState({\n  // \t\t\t\t\t\t\turl: state.url,\n  // \t\t\t\t\t\t\theaders: json.data[0],\n  // \t\t\t\t\t\t\trows: json.data.splice(1),\n  // \t\t\t\t\t\t})\n  // \t\t\t\t\t}\n  // \t\t\t\t})\n  // \t\t\t}\n  // \t\t})\n  // .catch((e) => console.log(\"ERROR: \" + e))\n  // }\n\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" LOADING \", state.url, \" \"));\n  }\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" ERROR: \", error.toString(), \" \"));\n  }\n\n  return createTable();\n}\n\nexport default Table; // export interface column {\n// \ttitle: string;\n//     dataIndex: string;\n//     key: string;\n//     width: number;\n// }\n// export interface row {\n// \t[key:string]: string\n// }\n// function createColumns(colNames:string[]) {\n// \tlet cols:column[] = []\n// \tfor (let i = 0; i < colNames.length; i++) {\n// \t\tlet newCol:column = {\n// \t\t\ttitle: colNames[i],\n// \t\t\tdataIndex: colNames[i],\n// \t\t\tkey: colNames[i],\n// \t\t\twidth: 100\n// \t\t}\n// \t\tcols.push(newCol)\n// \t}\n// \treturn cols;\n// }\n// function createRows(data:string[][]) {\n// \tlet colIds:string[] = data[0]\n// \tlet rows:row[] = []\n// \tfor (let i = 1; i < data.length; i++) {\n// \t\tlet newRow:row = {}\n// \t\tfor (let j = 0; j < colIds.length; j++) {\n// \t\t\tnewRow[colIds[j]] = data[i][j]\n// \t\t}\n// \t\trows.push(newRow)\n// \t}\n// \treturn rows;\n// }\n// // function createTable(data:string[][]) {\n// // \tlet cols:column[] = createColumns(data[0])\n// // \tlet rows:row[] = createRows(data)\n// // \treturn (\n// // \t\t<div className=\"Tables\">\n// // \t\t\t<Table columns={cols} data={rows} />\n// // \t\t</div>\n// // \t);\n// // }\n// module.exports = {\n// \tcreateColumns,\t\t\t\tcreateRows,\n// \tcreateTable\n// }","map":{"version":3,"sources":["/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx"],"names":["React","useState","useAxios","Table","props","url","headers","rows","state","setState","method","data","loading","error","execute","renderTableData","map","player","index","renderTableHeader","header","key","toUpperCase","createTable","splice","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./Table.css\"\nimport useAxios from 'axios-hooks';\n\ninterface tableProps {\n\turl:string;\n}\n\ninterface tableState {\n\turl: string;\n\theaders:string[];\n\trows:string[][];\n}\n\nfunction Table (props:tableProps) {\n\n   \tconst [state, setState] = useState<tableState>({ \n      \t\turl: props.url,\n      \t\theaders: [],\n      \t\trows: [],\n      })\n\n\n   const [{ data, loading, error}, execute] = useAxios({\n\t\turl: 'http://localhost:2999/get_roster_data',\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tdata: {\"value\": state.url}\n\t})\n\n   function renderTableData() {\n      \treturn state.rows.map((player, index) => {\n         \treturn (\n\t         \t<tr>{\n\t\t         \tplayer.map((data, index) => {\n\t\t               return (<td>{data}</td>);\n\t\t           \t})\n\t\t         }</tr>\n      \t\t);\n         })\n   }\n\n   function renderTableHeader() {\n      let header = state.headers\n      return header.map((key, index) => {\n         return <th key={key}>{key.toUpperCase()}</th>\n      })\n   }\n\n\n   function createTable () {\n   \t\texecute()\n   \t\tsetState({\n   \t\t\turl: state.url,\n   \t\t\theaders: data.data[0],\n   \t\t\trows: data.data.splice(1)\n   \t\t})\n\t   \treturn (\n\t   \t\t<tbody>\n\t\t   \t\t<tr className=\"Headers\">{renderTableHeader()}</tr>\n\t               {renderTableData()}\n\t\t      \t</tbody>       \n\t    );\n   }\n\n   // function getTableData() {\n   // \t\tawait fetch('http://localhost:2999/get_roster_data', {\n  \t// \t\tmethod: 'POST',\n  \t// \t\theaders: {\n  \t// \t\t\t'Access-Control-Allow-Origin': '*',\n  \t// \t\t\t'Accept': 'application/json',\n   //  \t\t\t'Content-Type': 'application/json'\n  \t// \t\t},\n  \t// \t\tbody: JSON.stringify({\"value\": state.url})\n  \t// \t})\n  \t// \t\t.then(async (response) => {\n  \t// \t\t\tif (response.ok) {\n  \t// \t\t\t\tawait response.json().then(json => {\n  \t// \t\t\t\t\tconsole.log(\"FROM TABLE = \" + JSON.stringify(json.data))\n  \t// \t\t\t\t\tif (json.data === []) {\n  \t// \t\t\t\t\t\tsetState({\n  \t// \t\t\t\t\t\t\turl: state.url,\n\t  // \t\t\t\t\t\t\theaders: [],\n\t  // \t\t\t\t\t\t\trows: [],\n  \t// \t\t\t\t\t\t})\n  \t// \t\t\t\t\t} else {\n  \t// \t\t\t\t\t\tsetState({\n  \t// \t\t\t\t\t\t\turl: state.url,\n  \t// \t\t\t\t\t\t\theaders: json.data[0],\n  \t// \t\t\t\t\t\t\trows: json.data.splice(1),\n  \t// \t\t\t\t\t\t})\n  \t// \t\t\t\t\t}\n  \t// \t\t\t\t})\n  \t// \t\t\t}\n  \t// \t\t})\n\t\t\t// .catch((e) => console.log(\"ERROR: \" + e))\n\n   // }\n\n   \n\n   if (loading) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> LOADING {state.url} </p>\n   \t\t</div>\n   \t)\n   }\n   if (error) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> ERROR: {error.toString()} </p>\n   \t\t</div>\n   \t)\n   }\n   return (\n   \tcreateTable()\n   )\n}\n\nexport default Table;\n\n// export interface column {\n// \ttitle: string;\n//     dataIndex: string;\n//     key: string;\n//     width: number;\n// }\n\n// export interface row {\n// \t[key:string]: string\n// }\n\n// function createColumns(colNames:string[]) {\n// \tlet cols:column[] = []\n// \tfor (let i = 0; i < colNames.length; i++) {\n// \t\tlet newCol:column = {\n// \t\t\ttitle: colNames[i],\n// \t\t\tdataIndex: colNames[i],\n// \t\t\tkey: colNames[i],\n// \t\t\twidth: 100\n// \t\t}\n// \t\tcols.push(newCol)\n// \t}\n// \treturn cols;\n// }\n\n// function createRows(data:string[][]) {\n// \tlet colIds:string[] = data[0]\n// \tlet rows:row[] = []\n// \tfor (let i = 1; i < data.length; i++) {\n// \t\tlet newRow:row = {}\n// \t\tfor (let j = 0; j < colIds.length; j++) {\n// \t\t\tnewRow[colIds[j]] = data[i][j]\n// \t\t}\n// \t\trows.push(newRow)\n// \t}\n// \treturn rows;\n// }\n\n\n// // function createTable(data:string[][]) {\n// // \tlet cols:column[] = createColumns(data[0])\n// // \tlet rows:row[] = createRows(data)\n// // \treturn (\n// // \t\t<div className=\"Tables\">\n// // \t\t\t<Table columns={cols} data={rows} />\n// // \t\t</div>\n// // \t);\n// // }\n\n// module.exports = {\n// \tcreateColumns,\t\t\t\tcreateRows,\n// \tcreateTable\n// }"]},"metadata":{},"sourceType":"module"}