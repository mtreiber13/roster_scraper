{"ast":null,"code":"import _slicedToArray from \"/Users/admin/Desktop/Work/roster_scraper/scraper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx\";\nimport React, { useState } from 'react';\nimport \"./Table.css\";\nimport useAxios from 'axios-hooks';\n\nfunction Table(props) {\n  const _useState = useState({\n    url: props.url,\n    headers: [],\n    rows: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useAxios = useAxios({\n    url: 'http://localhost:2999/get_roster_data',\n    method: 'POST',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"value\": state.url\n    }\n  }),\n        _useAxios2 = _slicedToArray(_useAxios, 1),\n        _useAxios2$ = _useAxios2[0],\n        data = _useAxios2$.data,\n        loading = _useAxios2$.loading,\n        error = _useAxios2$.error;\n\n  function renderTableData(rows) {\n    return rows.map((player, index) => {\n      return React.createElement(\"tr\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, player.map((data, index) => {\n        return React.createElement(\"td\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, data);\n      }));\n    });\n  }\n\n  function renderTableHeader(header) {\n    return header.map((key, index) => {\n      return React.createElement(\"th\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, key.toUpperCase());\n    });\n  }\n\n  function createTable(rosterData) {\n    try {\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"Headers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, renderTableHeader(rosterData['players'][0])), renderTableData(rosterData['players'].splice(1))));\n    } catch (err) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" \", JSON.stringify(error), \" \");\n    }\n  }\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \" LOADING \", state.url, \" \"));\n  }\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \" ERROR: \", error.toString(), \" \"));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \" \", data['title'], \" \"), createTable(data));\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/admin/Desktop/Work/roster_scraper/scraper/src/components/Table.tsx"],"names":["React","useState","useAxios","Table","props","url","headers","rows","state","setState","method","data","loading","error","renderTableData","map","player","index","renderTableHeader","header","key","toUpperCase","createTable","rosterData","splice","err","JSON","stringify","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./Table.css\"\nimport useAxios from 'axios-hooks';\n\ninterface tableProps {\n\turl:string;\n}\n\ninterface tableState {\n\turl: string;\n\theaders:string[];\n\trows:string[][];\n}\n\ninterface apiRes {\n\t\"data\":string[][];\n}\n\nfunction Table (props:tableProps) {\n\n   \tconst [state, setState] = useState<tableState>({ \n      \t\turl: props.url,\n      \t\theaders: [],\n      \t\trows: [],\n      })\n\n\n   const [{ data, loading, error}] = useAxios({\n\t\turl: 'http://localhost:2999/get_roster_data',\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tdata: {\"value\": state.url}\n\t})\n\n   function renderTableData(rows:string[][]) {\n      \treturn rows.map((player, index) => {\n         \treturn (\n\t         \t<tr key={index}>{\n\t\t         \tplayer.map((data, index) => {\n\t\t               return (<td key={index}>{data}</td>);\n\t\t           \t})\n\t\t         }</tr>\n      \t\t);\n         })\n   }\n\n   function renderTableHeader(header:string[]) {\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n\n\tinterface rosterResponse {\n\t\tplayers:string[][];\n\t\ttitle:string\n\t}\n   function createTable (rosterData:rosterResponse) {\n   \t\ttry{\n   \t\t\treturn (\n\t   \t\t\t\n\t   \t\t\t\t<table>\n\t\t\t   \t\t\t<tbody>\n\t\t\t\t   \t\t\t<tr className=\"Headers\">{renderTableHeader(rosterData['players'][0])}</tr>\n\t\t\t               \t\t{renderTableData(rosterData['players'].splice(1))}\n\t\t\t\t    \t</tbody>  \n\t\t\t\t    </table>   \n\t    \t);\n   \t\t} catch (err) {\n   \t\t\treturn (\n   \t\t\t\t<p> {JSON.stringify(error)} </p>\n   \t\t\t\t);\n   \t\t}\n\t   \t\n   }\n   \n   if (loading) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> LOADING {state.url} </p>\n   \t\t</div>\n   \t)\n   }\n   if (error) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> ERROR: {error.toString()} </p>\n   \t\t</div>\n   \t)\n   }\n   return (\n   \t\t<div>\n\t   \t\t<h6> {data['title']} </h6>\n   \t\t\t{createTable(data)}\n   \t\t</div>\n   \t\t\n   )\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}