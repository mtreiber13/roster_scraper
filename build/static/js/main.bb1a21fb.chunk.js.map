{"version":3,"sources":["one_hand_midd.JPG","components/Header.tsx","components/Table.tsx","components/TableContainer.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","props","title","name","logo","className","id","alt","src","Table","useState","url","headers","rows","state","useAxios","method","data","loading","error","toString","rosterData","map","key","index","toUpperCase","splice","player","err","JSON","stringify","createTable","TableContainer","urls","team","Form","value","showData","teamUrls","handleChange","bind","handleSubmit","scrape","fetch","body","this","then","response","a","async","ok","json","setState","teams","catch","e","console","log","event","target","persist","preventDefault","onSubmit","TextField","label","variant","onChange","Button","color","onClick","React","img","require","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb1a21fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/one_hand_midd.275a7ce8.JPG\";","import * as React from 'react';\nimport \"./Header.css\"\n\n\nexport interface HeaderElems {\n\ttitle: string;\n\tname: string;\n\tlogo: string;\n}\n\nfunction Header (props:HeaderElems) {\n\tconst {title, name, logo} = props\n\t  return (\n\t    <div className=\"Header\">\n\t      <div className=\"Header-title\">\n\t        {title}\n\t      </div>\n\t      <div className=\"Header-name\">\n\t        {name}\n\t      </div>\n\t      <div className=\"Header-logo\">\n\t        <img id=\"img\" alt=\"me playing\" src={logo}/>\n\t      </div>\n\t    </div>\n\t  );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport \"./Table.css\"\nimport useAxios from 'axios-hooks';\n\ninterface tableProps {\n\turl:string;\n}\n\ninterface tableState {\n\turl: string;\n\theaders:string[];\n\trows:string[][];\n}\n\ninterface apiRes {\n\t\"data\":string[][];\n}\n\nfunction Table (props:tableProps) {\n\n   \tconst [state] = useState<tableState>({ \n      \t\turl: props.url,\n      \t\theaders: [],\n      \t\trows: [],\n      })\n\n\n   const [{ data, loading, error}] = useAxios({\n\t\turl: 'http://localhost:2999/get_roster_data',\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tdata: {\"value\": state.url}\n\t})\n\n   function renderTableData(rows:string[][]) {\n      \treturn rows.map((player, index) => {\n         \treturn (\n\t         \t<tr key={index}>{\n\t\t         \tplayer.map((data, index) => {\n\t\t               return (<td key={index}>{data}</td>);\n\t\t           \t})\n\t\t         }</tr>\n      \t\t);\n         })\n   }\n\n   function renderTableHeader(header:string[]) {\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n\n\tinterface rosterResponse {\n\t\tplayers:string[][];\n\t\ttitle:string\n\t}\n   function createTable (rosterData:rosterResponse) {\n   \t\ttry{\n   \t\t\treturn (\n\t   \t\t\t// creates the table header and the table rows based on the response from the API (given in TableContainer)\n\t   \t\t\t\t<table>\n\t\t\t   \t\t\t<tbody>\n\t\t\t\t   \t\t\t<tr className=\"Headers\">{renderTableHeader(rosterData['players'][0])}</tr>\n\t\t\t               \t\t{renderTableData(rosterData['players'].splice(1))}\n\t\t\t\t    \t</tbody>  \n\t\t\t\t    </table>   \n\t    \t);\n   \t\t} catch (err) {       // displayes error if there is one\n   \t\t\treturn (\n   \t\t\t\t<p> {JSON.stringify(error)} </p>\n   \t\t\t\t);\n   \t\t}\n   }\n   \n   if (loading) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> LOADING {state.url} </p>\n   \t\t</div>\n   \t)\n   }\n   if (error) {\n   \treturn (\n   \t\t<div>\n   \t\t\t<p> ERROR: {error.toString()} </p>\n   \t\t</div>\n   \t)\n   }\n   return (\n   \t\t<div>\n\t   \t\t<h2> {data['title']} </h2>\n   \t\t\t{createTable(data)}\n   \t\t</div>\n   \t\t\n   )\n}\n\nexport default Table;","import React, { useState } from 'react';\nimport Table from \"./Table\"\n\nexport interface containerState {\n\turls: string[];\n}\n\nexport interface containerProps {\n\turls: string[];\n}\n\nfunction TableContainer (props:containerProps) {\n\tconst [state] = useState<containerState>({ \n      \t\turls: props.urls\n      })\n\n\treturn (\n\t\t<div className=\"TableContainer\">\n\t\t\t{state.urls.map( (team:string, index:number) => {\n\t\t\t\treturn(\n\t\t\t\t\t<div key={index.toString()}>\n\t\t\t\t\t\t<Table url={team}/>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\n\nexport default TableContainer;\n","import * as React from 'react';\nimport \"./Form.css\"\nimport TableContainer from \"./TableContainer\"\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\n\nexport interface formState {\n\tvalue: string;\n\tshowData: boolean;\n\tteamUrls: string[];\n}\n\nexport interface scrapeResponse {\n\tdata:string[][][];\n}\n\nclass Form extends React.Component<{}, formState> {\n\tconstructor(props:any) {\n\t  \tsuper(props);\n\t  \tthis.state = {\n\t  \t\tvalue: '',\n\t  \t\tshowData: false,\n\t  \t\tteamUrls: []\n\t  \t}\n\t  \tthis.handleChange = this.handleChange.bind(this);\n\t  \tthis.handleSubmit = this.handleSubmit.bind(this);\n\t  \tthis.scrape = this.scrape.bind(this);\n\t}\n\n\t// gets the team URLs from the api\n\tasync scrape () {\n\t\tawait fetch('http://localhost:2999/get_teams', {\n  \t\t\tmethod: 'POST',\n  \t\t\theaders: {\n  \t\t\t\t'Access-Control-Allow-Origin': '*',\n  \t\t\t\t'Accept': 'application/json',\n    \t\t\t'Content-Type': 'application/json'\n  \t\t\t},\n  \t\t\tbody: JSON.stringify({\"value\": this.state.value})\n  \t\t})\n  \t\t\t.then(async (response) => {\n  \t\t\t\tif (response.ok) {\n  \t\t\t\t\tawait response.json().then(json => {\n  \t\t\t\t\t\tthis.setState({\n  \t\t\t\t\t\t\tshowData: true,\n  \t\t\t\t\t\t\tteamUrls: json.teams\n  \t\t\t\t\t\t})\n  \t\t\t\t\t})\n  \t\t\t\t}\n  \t\t\t})\n\t\t\t.catch((e) => console.log(\"ERROR: \" + e))\n\t}\n\n\t// constantly updates the value based on input\n\thandleChange(event:any) {\n\t\tthis.setState({value: event.target.value});\n\t}\n\n\t// handles the submit button, makes call to scraper\n\tasync handleSubmit(event:any) {\n\t\tevent.persist()\n\t\tevent.preventDefault();\n\t\tawait this.scrape();\n\t}\n\n\n\trender() {\t\n\t\treturn(\n\t\t\t<div className=\"FormData\">\n\t\t\t\t<div className=\"Form\">\n\t\t\t\t\t<p>Enter the school's athletics URL:</p>\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t        \t<TextField id=\"outlined-basic\" label=\"URL\" variant=\"outlined\" value={this.state.value} onChange={this.handleChange}/>\n\t\t\t        \t<br></br>\n\t\t\t      \t</form>\n\t\t\t      \t<br></br>\n\t\t\t      \t<Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>\n        \t\t\t\tGet Athlete Data\n      \t\t\t\t</Button>\n\t\t\t    </div>\n\t\t\t    <div className=\"Tables\">\n\t\t\t    \t{ this.state.showData ? <TableContainer urls={this.state.teamUrls}/> : null }\n\t\t\t    </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\nexport default Form;","import React from 'react';\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\"\n\nimport './App.css';\nconst img = require(\"./one_hand_midd.JPG\")\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header title=\"Roster Scraper\" name=\"Matt Treiber\" logo={img}/>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}